DAO Class 
package com.example.dao;

import com.example.model.User;

import java.sql.*;

public class UserDAO {

    private Connection connection;

    public UserDAO(Connection connection) {
        this.connection = connection;
    }

    public boolean registerUser(User user) {
        String query = "INSERT INTO users (name, email, password) VALUES (?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, user.getName());
            stmt.setString(2, user.getEmail());
            stmt.setString(3, user.getPassword());
            int result = stmt.executeUpdate();
            return result > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    public User getUserByEmail(String email) {
        String query = "SELECT * FROM users WHERE email = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, email);
            ResultSet resultSet = stmt.executeQuery();
            if (resultSet.next()) {
                return new User(resultSet.getString("name"), resultSet.getString("email"), resultSet.getString("password"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
}


 Service Class (UserService.java)
package com.example.service;

import com.example.dao.UserDAO;
import com.example.model.User;

public class UserService {

    private UserDAO userDAO;

    public UserService(UserDAO userDAO) {
        this.userDAO = userDAO;
    }

    public boolean registerUser(User user) {
        return userDAO.registerUser(user);
    }

    public User getUserByEmail(String email) {
        return userDAO.getUserByEmail(email);
    }
}


 Unit Test for DAO Layer (UserDAOTest.java)
package com.example.dao;

import com.example.model.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.sql.*;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class UserDAOTest {

    private UserDAO userDAO;
    private Connection mockConnection;
    private PreparedStatement mockPreparedStatement;
    private ResultSet mockResultSet;

    @BeforeEach
    void setUp() throws SQLException {
        mockConnection = mock(Connection.class);
        mockPreparedStatement = mock(PreparedStatement.class);
        mockResultSet = mock(ResultSet.class);

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        userDAO = new UserDAO(mockConnection);
    }

    @Test
    void testRegisterUserSuccess() throws SQLException {
        User user = new User("John Doe", "john.doe@example.com", "password123");

        when(mockPreparedStatement.executeUpdate()).thenReturn(1);

        boolean result = userDAO.registerUser(user);
        assertTrue(result);
    }

    @Test
    void testRegisterUserFailure() throws SQLException {
        User user = new User("John Doe", "john.doe@example.com", "password123");

        when(mockPreparedStatement.executeUpdate()).thenReturn(0);

        boolean result = userDAO.registerUser(user);
        assertFalse(result);
    }

    @Test
    void testGetUserByEmail() throws SQLException {
        User user = new User("John Doe", "john.doe@example.com", "password123");

        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true);
        when(mockResultSet.getString("name")).thenReturn("John Doe");
        when(mockResultSet.getString("email")).thenReturn("john.doe@example.com");
        when(mockResultSet.getString("password")).thenReturn("password123");

        User result = userDAO.getUserByEmail("john.doe@example.com");

        assertNotNull(result);
        assertEquals("john.doe@example.com", result.getEmail());
    }

    @Test
    void testGetUserByEmailNotFound() throws SQLException {
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(false);

        User result = userDAO.getUserByEmail("nonexistent@example.com");
        assertNull(result);
    }
}



Unit Test for Service Layer 
package com.example.service;

import com.example.dao.UserDAO;
import com.example.model.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class UserServiceTest {

    private UserService userService;
    private UserDAO mockUserDAO;

    @BeforeEach
    void setUp() {
        mockUserDAO = mock(UserDAO.class);
        userService = new UserService(mockUserDAO);
    }

    @Test
    void testRegisterUserSuccess() {
        User user = new User("John Doe", "john.doe@example.com", "password123");

        when(mockUserDAO.registerUser(user)).thenReturn(true);

        boolean result = userService.registerUser(user);
        assertTrue(result);
    }

    @Test
    void testRegisterUserFailure() {
        User user = new User("John Doe", "john.doe@example.com", "password123");

        when(mockUserDAO.registerUser(user)).thenReturn(false);

        boolean result = userService.registerUser(user);
        assertFalse(result);
    }

    @Test
    void testGetUserByEmail() {
        User user = new User("John Doe", "john.doe@example.com", "password123");

        when(mockUserDAO.getUserByEmail("john.doe@example.com")).thenReturn(user);

        User result = userService.getUserByEmail("john.doe@example.com");

        assertNotNull(result);
        assertEquals("john.doe@example.com", result.getEmail());
    }

    @Test
    void testGetUserByEmailNotFound() {
        when(mockUserDAO.getUserByEmail("nonexistent@example.com")).thenReturn(null);

        User result = userService.getUserByEmail("nonexistent@example.com");

        assertNull(result);
    }
}
